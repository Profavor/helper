buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.20.1')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'profavor'
version = '1.1'
sourceCompatibility = 1.8

jar {
	baseName = 'm-scheduler'
	manifest {
		attributes 'Title': 'FavorApplication', 'Version': version, 'Main-Class': 'com.favorsoft.MSchedulerApplication'
}
    archiveName 'm-scheduler.jar'
    dependsOn configurations.runtime
    from {
      configurations.compile.collect {it.isDirectory()? it: zipTree(it)}
     }
}

bootJar {
	baseName = "m-scheduler"
	version = project.version
}

docker {
	name "${project.group}/${jar.baseName}:$project.version"
	dependsOn build
	files bootJar
	dockerfile file('src/main/docker/Dockerfile')
	buildArgs([BUILD_VERSION: project.version])
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-mail')
	implementation('org.springframework.boot:spring-boot-starter-websocket')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-freemarker')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'	
	compile group: 'c3p0', name: 'c3p0', version: '0.9.1.2'
	compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.0'
	compile group: 'org.quartz-scheduler', name: 'quartz-jobs', version: '2.3.0'
	compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.3.0'
	compile group: 'commons-codec', name: 'commons-codec', version: '1.9'
	
	compile 'io.jsonwebtoken:jjwt-api:0.10.5'
    runtime 'io.jsonwebtoken:jjwt-impl:0.10.5',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.60',
            'io.jsonwebtoken:jjwt-jackson:0.10.5'
	
}

bootRun {
    systemProperties = System.properties
}
